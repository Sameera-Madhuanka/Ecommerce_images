// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("customer") // "admin" or "customer"
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

model Product {
  id             String    @id @default(cuid())
  name           String
  description    String?
  categoryId     String
  price          Float
  purchasedPrice Float?
  weight         Float     @default(0)
  stock          Int       @default(0)
  images         String[]  // Array of image URLs
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  category Category @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  status         String      @default("pending") // pending, processing, shipped, delivered, cancelled
  total          Float
  shippingCost   Float       @default(0)
  paymentMethod  String      @default("COD")
  shippingAddress String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float   // Price at time of order

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model ShippingMethod {
  id        String  @id @default(cuid())
  name      String
  minWeight Float   @default(0)
  maxWeight Float?
  cost      Float
  isActive  Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id       String  @id @default(cuid())
  name     String  @unique
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String // JSON string for complex values
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
